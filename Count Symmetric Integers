/*You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].

 

Example 1:

Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.
Example 2:

Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.
 

Constraints:

1 <= low <= high <= 104*/
class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int count = 0; // 🍥 Shadow Clone counter

        for (int num = low; num <= high; num++) {
            String str = Integer.toString(num); // 🎭 Transform number to string
            int len = str.length();

            // 🔥 Skip if it doesn't have even chakra balance (odd number of digits)
            if (len % 2 != 0) continue;

            int half = len / 2;
            int leftSum = 0;
            int rightSum = 0;

            // ⬅️ Sum of the left half (first n digits)
            for (int i = 0; i < half; i++) {
                leftSum += str.charAt(i) - '0';
            }

            // ➡️ Sum of the right half (last n digits)
            for (int i = half; i < len; i++) {
                rightSum += str.charAt(i) - '0';
            }

            // ☯️ If chakra is balanced, count it
            if (leftSum == rightSum) {
                count++;
            }
        }

        return count; // 🍥 Final mission report
    }
}
